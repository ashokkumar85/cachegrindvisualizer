<?xml version="1.0" encoding="utf-8"?>
<develar:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:develar="http://neo-net.ru/2007/develar" paddingBottom="5" paddingLeft="5" paddingTop="5" paddingRight="5" preinitialize="handlePreInitialize()" creationComplete="handleCreationComplete()"  nativeDragEnter="handleNativeDragEnter(event)" nativeDragDrop="handleNativeDragDrop(event)">
	
	<mx:Metadata>
		[ResourceBundle('Shared')]
		[ResourceBundle('CachegrindVisualizer')]
	</mx:Metadata>
	
	<mx:Style source="style.css"/>
	
	<mx:ApplicationControlBar width="100%">
		<mx:Button label="{resourceManager.getString('Shared', 'open')}" click="browse()"/>
		<mx:Button id="b_refresh" label="{resourceManager.getString('Shared', 'refresh')}" enabled="false" click="Tab(tabNavigator.selectedChild).refresh()"/>
		<mx:Spacer width="100%"/>
		<develar:LocaleComboBox dataProvider="{locales}"/>
	</mx:ApplicationControlBar>
	<develar:TabNavigator id="tabNavigator" width="100%" height="100%" change="handleTabChange()" childRemove="handleTabRemove()"/>
	
	<mx:Script><![CDATA[
		
	import flash.filesystem.File;
	import flash.system.System;
	import flash.events.NativeDragEvent;
	import flash.desktop.ClipboardFormats;
	import flash.desktop.NativeDragManager;
	
	import mx.events.IndexChangedEvent;
	
	import develar.formatters.Formatter;
	import develar.core.Singleton;
	
	import cachegrindVisualizer.ui.Tab;
	import cachegrindVisualizer.net.PersistenceSession;
	import cachegrindVisualizer.callGraph.builders.Configuration;
	
	public const FILE_TYPE:String = 'cg';
	
	[Bindable]
	private var locales:Array = new Array({id: 'en_US', label: 'English'}, {id: 'ru', label: 'Russian'});
	
	private var file:File;
	private var fileFilters:Array;
	
	private function handlePreInitialize():void
	{
		Singleton.registerClass('develar.net::IPersistenceSession', PersistenceSession);
	}

	private function handleCreationComplete():void
	{
		nativeWindow.maximize();
		nativeWindow.visible = true;
		
		//handleInvoke(['--grouping="no"', ]);
		
		fileFilters = new Array(new FileFilter(resourceManager.getString('CachegrindVisualizer', 'cachegrindFiles'), '*.cg;cachegrind.out.*'), new FileFilter(resourceManager.getString('CachegrindVisualizer', 'allFiles'), '*'));
	}
	
	private function handleNativeDragEnter(event:NativeDragEvent):void
	{
		if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
		{
			NativeDragManager.acceptDragDrop(this);
		}
	}
	
	private function handleNativeDragDrop(event:NativeDragEvent):void
	{
		for each (file in event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT))
		{
			openFile();
		}
	}

	private function browse():void
	{
		file = new File();
		file.addEventListener(FileListEvent.SELECT_MULTIPLE, handleSelectMultiple);
		if (PersistenceSession.instance.profilerOutputDirectory != null)
		{
			file.nativePath = PersistenceSession.instance.profilerOutputDirectory;
		}
		
		file.browseForOpenMultiple('', fileFilters);
	}
	
	private function handleSelectMultiple(event:FileListEvent):void
	{
		for each (file in event.files)
		{
			openFile();
		}
	}
	
	private function openFile():void
	{	
		PersistenceSession.instance.profilerOutputDirectory = file.nativePath;
		PersistenceSession.instance.flush();
		
		for each (var existTab:Tab in tabNavigator.getChildren())
		{
			if (existTab.file.name == file.name)
			{
				tabNavigator.selectedChild = existTab;
				if (existTab.file.modificationDate.time != file.modificationDate.time)
				{
					existTab.refresh();
				}
				return;
			}
		}
		
		var tab:Tab = new Tab();		
		tab.file = file;
		file = null;
		tabNavigator.addChild(tab);
		tabNavigator.selectedChild = tab;
		9
		b_refresh.enabled = true;
	}
	
	private function handleTabChange():void
	{
		// в момент создания вкладки мы еще не произвели анализ и имя анализируемого программы нам неизвестно
		if (Tab(tabNavigator.selectedChild).initialized)
		{
			title = 'CachegrindVisualizer — ' + tabNavigator.selectedChild.label + ' (' + Tab(tabNavigator.selectedChild).tree.firstVisibleItem.fileName + ')';
		}
	}
	
	protected function handleInvoke(/*event:InvokeEvent*/arguments:Array):void
	{
		var configuration:Configuration;
		var parameterName:String = null;
		for each (var argument:String in /*event.*/arguments)
		{
			if (argument.substr(0, 2) == '--')
			{
				parameterName = argument.substr(2);
			}
			else if (parameterName != null)
			{
				configuration[parameterName] = argument;
			}
			else
			{
				file = new File(parameterName);
			}
			openFile();
		}
	}
	
	private function handleTabRemove():void
	{
		b_refresh.enabled = tabNavigator.numChildren > 1;
	}
	
	]]></mx:Script>	
	
</develar:WindowedApplication>